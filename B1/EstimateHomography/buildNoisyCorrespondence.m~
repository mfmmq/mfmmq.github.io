function [ Correspond ] = buildNoisyCorrespondence(T_ow,T_cw, ...
    CalibrationGrid,KMatrix,CameraHeight,CameraWidth)
%buildNoisyCorrespondence
% Function takes sets of 4-vectors in world coordinates and computes where
% they end up in the camera image. The representation is chosen for
% constructing grid-point to image-point correspondences and the output is
% a list of 4-vectors that are not homogeneous points, but pairs of points
% in the form [[u,v]';[xy]']. Normally distributed noise is added before
% the correspondences are returned to the calling function
%
% T_ow is the transformation of points in object coordinates into points 
% in world coordinates 4x4
% T_cw is the 4x4 camera frame in world coordinates
% CalibrationGrid is a list of points that correspond to the corners in the
% grid
% KMatrix is K-Matrix of the camera in pixels
% CameraHeight is the number of vertical pixels
% CameraWidth is the number of horizontal pixels


% Check sizes 

s = size(T_ow);
if s(1) ~= 4 || s(2) ~= 4
    error('T_ow has an invalid size')
end

s = size(KMatrix);
if s(1) ~= 3 || s(2) ~= 3
    error('KMatrix has an invalid size')
end

s = size(T_cw);
if s(1) ~= 4 || s(2) ~= 4
    error('T_cw has an invalid size')
end

% Transform the object into world coordinates

calibrationGrid = T_ow * CalibrationGrid;

% Transform the object into camera coordinates using the backslash operator
ObjectLines = T_cw \ CalibrationGrid;

% Project out the 4th coordinate and multiply by the KMatrix
ObjectLines = KMatrix * ObjectLines(1:3,:);
